{"version":3,"file":"default-src_app_auth_models_login_model_ts-src_app_auth_models_reset-password_model_ts-src_ap-4121e0.js","mappings":"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","names":["LoginModel","RegisterModel","ResetPasswordModel","_angular_core__WEBPACK_IMPORTED_MODULE_2__","SignUpComponent","constructor","formBuilder","authService","router","toasterService","this","unsubscribeAll","rxjs__WEBPACK_IMPORTED_MODULE_3__","ngOnInit","window","scrollTo","clear","firstName","lastName","email","password","phoneNumber","code","isVerification","isResendOtp","submitted","verifySubmitted","isAcceptedTermsAndConditions","sendIsPasswordResetSuccessfully","registerForm","group","_angular_forms__WEBPACK_IMPORTED_MODULE_4__","passwordConfirm","confirmPasswordValidator","verificationForm","get","valueChanges","pipe","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","subscribe","updateValueAndValidity","register","invalid","setTimeout","formGroupDirective","resetForm","patchValue","disable","registerModel","_models_register_model__WEBPACK_IMPORTED_MODULE_6__","controls","value","trim","isResend","response","status","isSuccess","successMsg","message","showError","clearRegister","verifyCode","verifyEmailConfirmCode","data","iec","setUserLoggedIn","u","token","fn","ln","r","bl","pn","Opbl","aguserid","credLi","agid","navigate","isError","errorMsg","clearVerifyCode","firstNameInput","nativeElement","focus","codeInput","ngOnDestroy","next","complete","selectors","control","parent","passwordsNotMatching"],"sourceRoot":"webpack:///","sources":["./src/app/auth/models/login.model.ts","./src/app/auth/models/register.model.ts","./src/app/auth/models/reset-password.model.ts","./src/app/auth/sign-up/sign-up.component.html","./src/app/auth/sign-up/sign-up.component.ts"],"sourcesContent":["export class LoginModel {\r\n  email: string;\r\n  password: string;\r\n}\r\n","export class RegisterModel {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  phoneNumber: string;\r\n  password: string;\r\n  isResend: boolean;\r\n  city: string;\r\n  isCurrentlyWorkingAsTravelAgent: boolean;\r\n  isCurrentlyWorkingAsBusinessUser: boolean;\r\n  travelAgencyName: string\r\n}\r\n","export class ResetPasswordModel {\r\n  email: string;\r\n  code: string;\r\n  newPassword: string;\r\n}\r\n","<section class=\"hero-signup\">\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-12 col-sm-12 col-xs-12\">\r\n        <div class=\"signup-boxes\">\r\n          <div class=\"signup-box\">\r\n            <ng-container *ngIf=\"!isVerification\">\r\n              <div class=\"signup-title\">\r\n                <h2>Sign Up and Save</h2>\r\n                <p>Create an account now to access member only deals</p>\r\n              </div>\r\n              <div class=\"signup-form\">\r\n                <form [formGroup]=\"registerForm\">\r\n                  <div class=\"alert alert-danger\" *ngIf=\"isError\">\r\n                    {{ errorMsg }}\r\n                  </div>\r\n                  <div class=\"alert alert-success\" *ngIf=\"isSuccess\">\r\n                    {{ successMsg }}\r\n                  </div>\r\n                  <label>First Name</label>\r\n                  <input type=\"text\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"First Name\"\r\n                         formControlName=\"firstName\"\r\n                         #firstNameInput\r\n                         [ngClass]=\"{ 'is-invalid': (submitted || registerForm.get('firstName').touched) && registerForm.get('firstName').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"registerForm.get('firstName').errors && (submitted || registerForm.get('firstName').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"registerForm.get('firstName').errors.required\">First Name is required.</div>\r\n                    <div *ngIf=\"registerForm.get('firstName').errors.maxlength\">The First Name must be at max 50 characters long.</div>\r\n                  </div>\r\n                  <label>Last Name</label>\r\n                  <input type=\"text\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"Last Name\"\r\n                         formControlName=\"lastName\"\r\n                         [ngClass]=\"{ 'is-invalid': (submitted || registerForm.get('lastName').touched) && registerForm.get('lastName').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"registerForm.get('lastName').errors && (submitted || registerForm.get('lastName').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"registerForm.get('lastName').errors.required\">Last Name is required.</div>\r\n                    <div *ngIf=\"registerForm.get('lastName').errors.maxlength\">The Last Name must be at max 50 characters long.</div>\r\n                  </div>\r\n                  <label>Email</label>\r\n                  <input type=\"text\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"Email\"\r\n                         formControlName=\"email\"\r\n                         #emailInput\r\n                         [ngClass]=\"{ 'is-invalid': (submitted || registerForm.get('email').touched) && registerForm.get('email').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"registerForm.get('email').errors && (submitted || registerForm.get('email').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"registerForm.get('email').errors.required\">Email is required.</div>\r\n                    <div *ngIf=\"registerForm.get('email').errors.email\">Enter a valid email.</div>\r\n                  </div>\r\n                  <label>Password</label>\r\n                  <input type=\"password\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"Password\"\r\n                         formControlName=\"password\"\r\n                         [ngClass]=\"{ 'is-invalid': (submitted || registerForm.get('password').touched) && registerForm.get('password').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"registerForm.get('password').errors && (submitted || registerForm.get('password').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"registerForm.get('password').errors.required\">Password is required.</div>\r\n                    <div *ngIf=\"registerForm.get('password').errors.minlength\">Password must be at least 8 characters.</div>\r\n                    <div *ngIf=\"registerForm.get('password').errors.maxlength\">Password must be at max 25 characters.</div>\r\n                  </div>\r\n                  <label>Confirm Password</label>\r\n                  <input type=\"password\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"Confirm Password\"\r\n                         formControlName=\"passwordConfirm\"\r\n                         [ngClass]=\"{ 'is-invalid': (submitted || registerForm.get('passwordConfirm').touched) && registerForm.get('passwordConfirm').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"registerForm.get('passwordConfirm').errors && (submitted || registerForm.get('passwordConfirm').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"registerForm.get('passwordConfirm').errors.required\">Password is required.</div>\r\n                    <div *ngIf=\"registerForm.get('passwordConfirm').errors.passwordsNotMatching\">Passwords must match.</div>\r\n                  </div>\r\n                  <label>Phone Number</label>\r\n                  <input type=\"text\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"Phone Number\"\r\n                         formControlName=\"phoneNumber\"\r\n                         #firstNameInput\r\n                         [ngClass]=\"{ 'is-invalid': (submitted || registerForm.get('phoneNumber').touched) && registerForm.get('phoneNumber').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"registerForm.get('phoneNumber').errors && (submitted || registerForm.get('phoneNumber').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"registerForm.get('phoneNumber').errors.required\">Phone Number is required.</div>\r\n                  </div>\r\n\r\n                  <div class=\"agree-box\">\r\n                    <div class=\"agree-icon\">\r\n                      <div class=\"tool-check fliht-check\">\r\n                        <input type=\"checkbox\" id=\"agree\" class=\"tool-input\" [(ngModel)]=\"isAcceptedTermsAndConditions\" [ngModelOptions]=\"{standalone: true}\">\r\n                        <label for=\"agree\"></label>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"agree-cont\">\r\n                      <p>I understand and agree with the Fare Rules , the Visa Rules , the Privacy Policy , the User Agreement and Terms of Service of <a href=\"javascript:void(0);\"> Mehman.pk</a></p>\r\n                    </div>\r\n                  </div>\r\n                  <div *ngIf=\"submitted && !isAcceptedTermsAndConditions\" class=\"invalid-feedback\">\r\n                    <div>Please accept terms & conditions.</div>\r\n                  </div>\r\n                  <button type=\"submit\"\r\n                          class=\"custom-sign-btn btn\"\r\n                          (click)=\"register()\"\r\n                          [disabled]=\"(registerForm.invalid || !isAcceptedTermsAndConditions) && submitted\">\r\n                    Sign Up\r\n                  </button>\r\n                </form>\r\n              </div>\r\n              <div class=\"have-account\">\r\n                <div class=\"account-cont\">\r\n                  <h5>Alreay have an account?</h5>\r\n                </div>\r\n                <div class=\"have-btn\">\r\n                  <a [routerLink]=\"['/auth/signin']\">Sign In</a>\r\n                </div>\r\n              </div>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"isVerification\">\r\n              <div class=\"signup-title\">\r\n                <h2>Verify OTP</h2>\r\n                <p>Confirm your registered email address</p>\r\n              </div>\r\n              <div class=\"signup-form\">\r\n                <form [formGroup]=\"verificationForm\">\r\n                  <div class=\"alert alert-danger\" *ngIf=\"isError\">\r\n                    {{ errorMsg }}\r\n                  </div>\r\n                  <div class=\"alert alert-success\" *ngIf=\"isSuccess\">\r\n                    {{ successMsg }}\r\n                  </div>\r\n                  <!--<label>First Name</label>\r\n                  <input type=\"text\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"First Name\"\r\n                         formControlName=\"firstName\"\r\n                         #firstNameInput\r\n                         [ngClass]=\"{ 'is-invalid': (verifySubmitted || verificationForm.get('firstName').touched) && verificationForm.get('firstName').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"verificationForm.get('firstName').errors && (verifySubmitted || verificationForm.get('firstName').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"verificationForm.get('firstName').errors.required\">First Name is required.</div>\r\n                    <div *ngIf=\"verificationForm.get('firstName').errors.maxlength\">The First Name must be at max 50 characters long.</div>\r\n                  </div>\r\n                  <label>Last Name</label>\r\n                  <input type=\"text\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"Last Name\"\r\n                         formControlName=\"lastName\"\r\n                         [ngClass]=\"{ 'is-invalid': (verifySubmitted || verificationForm.get('lastName').touched) && verificationForm.get('lastName').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"verificationForm.get('lastName').errors && (verifySubmitted || verificationForm.get('lastName').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"verificationForm.get('lastName').errors.required\">Last Name is required.</div>\r\n                    <div *ngIf=\"verificationForm.get('lastName').errors.maxlength\">The Last Name must be at max 50 characters long.</div>\r\n                  </div>-->\r\n                  <label>Email</label>\r\n                  <input type=\"text\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"Email\"\r\n                         formControlName=\"email\"\r\n                         [ngClass]=\"{ 'is-invalid': (verifySubmitted || verificationForm.get('email').touched) && verificationForm.get('email').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"verificationForm.get('email').errors && (verifySubmitted || verificationForm.get('email').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"verificationForm.get('email').errors.required\">Email is required.</div>\r\n                    <div *ngIf=\"verificationForm.get('email').errors.email\">Enter a valid email.</div>\r\n                  </div>\r\n                  <!--<label>Password</label>\r\n                  <input type=\"password\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"Password\"\r\n                         formControlName=\"password\"\r\n                         [ngClass]=\"{ 'is-invalid': (verifySubmitted || verificationForm.get('password').touched) && verificationForm.get('password').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"verificationForm.get('password').errors && (verifySubmitted || verificationForm.get('password').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"verificationForm.get('password').errors.required\">Password is required.</div>\r\n                    <div *ngIf=\"verificationForm.get('password').errors.minlength\">Password must be at least 8 characters.</div>\r\n                    <div *ngIf=\"verificationForm.get('password').errors.maxlength\">Password must be at max 25 characters.</div>\r\n                  </div>\r\n                  <label>Phone Number</label>\r\n                  <input type=\"text\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"Phone Number\"\r\n                         formControlName=\"phoneNumber\"\r\n                         #firstNameInput\r\n                         [ngClass]=\"{ 'is-invalid': (verifySubmitted || verificationForm.get('phoneNumber').touched) && verificationForm.get('phoneNumber').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"verificationForm.get('phoneNumber').errors && (verifySubmitted || verificationForm.get('phoneNumber').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"verificationForm.get('phoneNumber').errors.required\">Phone Number is required.</div>\r\n                  </div>-->\r\n                  <label>OTP (check your mail)</label>\r\n                  <input type=\"text\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"OTP (check your mail)\"\r\n                         formControlName=\"code\"\r\n                         #codeInput\r\n                         [ngClass]=\"{ 'is-invalid': (verifySubmitted || verificationForm.get('code').touched) && verificationForm.get('code').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"verificationForm.get('code').errors && (verifySubmitted || verificationForm.get('code').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"verificationForm.get('code').errors.required\">OTP (from Mail) is required.</div>\r\n                  </div>\r\n                  <button type=\"submit\"\r\n                          class=\"custom-sign-btn btn mt-4\"\r\n                          (click)=\"verifyCode()\"\r\n                          [disabled]=\"verificationForm.invalid && verifySubmitted\">\r\n                    Verify OTP\r\n                  </button>\r\n                  <button type=\"submit\"\r\n                          class=\"custom-sign-btn btn mt-3\"\r\n                          (click)=\"register(true)\"\r\n                          *ngIf=\"isResendOtp\">\r\n                    Resend OTP\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </ng-container>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n\r\n\r\n\r\n\r\n\r\n<!-- mail confirmation pop up -->\r\n<!--<div class=\"modal mail-confirmation fade\" id=\"exampleModalCenter\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\r\n  <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <div class=\"main-box\">\r\n          <div class=\"mail-content\">\r\n            <h1>Confirm your email</h1>\r\n            <p>\r\n              Please check your inbox for confirmation.\r\n              Click on the link on the email to confirm your email address\r\n            </p>\r\n          </div>\r\n          <div class=\"mail-btn\">\r\n            <a href=\"javascript(0);\">Continue</a>\r\n            <a href=\"javascript(0);\" class=\"cancel\">Resend Verification mail</a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>-->\r\n","import { Component, OnInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormGroup, ValidationErrors, ValidatorFn, Validators, FormGroupDirective } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil, count } from 'rxjs/operators';\r\n\r\nimport { AuthService } from '../shared/auth.service';\r\nimport { RegisterModel } from '../models/register.model';\r\nimport { ToasterService } from 'src/app/services/toastr-service';\r\n\r\n@Component({\r\n  selector: 'app-sign-up',\r\n  templateUrl: './sign-up.component.html',\r\n  styleUrls: ['./sign-up.component.scss']\r\n})\r\nexport class SignUpComponent implements OnInit, OnDestroy {\r\n\r\n  registerForm: FormGroup;\r\n  submitted: boolean;\r\n  isError: boolean;\r\n  errorMsg: string;\r\n  isSuccess: boolean;\r\n  successMsg: string;\r\n  isAcceptedTermsAndConditions: boolean;\r\n  @ViewChild('firstNameInput') firstNameInput: ElementRef;\r\n  @ViewChild(FormGroupDirective) formGroupDirective: FormGroupDirective;\r\n\r\n  verificationForm: FormGroup;\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  password: string;\r\n  phoneNumber: string;\r\n  code: string;\r\n  verifySubmitted: boolean;\r\n\r\n  isVerification: boolean;\r\n  isResendOtp: boolean;\r\n  @ViewChild('codeInput') codeInput: ElementRef;\r\n\r\n  // Private\r\n  private unsubscribeAll: Subject<any>;\r\n\r\n  /*\r\n    * Constructor\r\n    *\r\n    */\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private toasterService: ToasterService\r\n  ) {\r\n\r\n    // Set the private defaults\r\n    this.unsubscribeAll = new Subject();\r\n  }\r\n\r\n  // -----------------------------------------------------------------------------------------------------\r\n  // @ Lifecycle hooks\r\n  // -----------------------------------------------------------------------------------------------------\r\n\r\n  /*\r\n  * On init\r\n  */\r\n  ngOnInit(): void {\r\n    window.scrollTo(0, 0);\r\n    this.clear();\r\n    this.firstName = '';\r\n    this.lastName = '';\r\n    this.email = '';\r\n    this.password = '';\r\n    this.phoneNumber = '';\r\n    this.code = '';\r\n    this.isVerification = false;\r\n    this.isResendOtp = false;\r\n    this.submitted = false;\r\n    this.verifySubmitted = false;\r\n    this.isAcceptedTermsAndConditions = false;\r\n    // this.authService.sendIsUserRegisteredSuccessfully(false);\r\n    this.authService.sendIsPasswordResetSuccessfully(false);\r\n    this.registerForm = this.formBuilder.group({\r\n      firstName: ['', [Validators.required, Validators.maxLength(50)]],\r\n      lastName: ['', [Validators.required, Validators.maxLength(50)]],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(25)]],\r\n      passwordConfirm: ['', [Validators.required, confirmPasswordValidator]],\r\n      phoneNumber: ['', Validators.required]\r\n    });\r\n    this.verificationForm = this.formBuilder.group({\r\n      // firstName: ['', [Validators.required, Validators.maxLength(50)]],\r\n      // lastName: ['', [Validators.required, Validators.maxLength(50)]],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      // password: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(25)]],\r\n      // phoneNumber: ['', Validators.required],\r\n      code: ['', [Validators.required]]\r\n    });\r\n\r\n    // Update the validity of the 'passwordConfirm' field\r\n    // when the 'password' field changes\r\n    this.registerForm.get('password').valueChanges\r\n      .pipe(takeUntil(this.unsubscribeAll))\r\n      .subscribe(() => {\r\n        this.registerForm.get('passwordConfirm').updateValueAndValidity();\r\n      });\r\n  }\r\n\r\n  register(isResendOtp = false) {\r\n    this.clear();\r\n    this.submitted = true;\r\n    if (this.registerForm.invalid) {\r\n      return;\r\n    }\r\n    if (isResendOtp === false) {\r\n      this.isVerification = false;\r\n      this.isResendOtp = false;\r\n    } else {\r\n      setTimeout(() => {\r\n        this.formGroupDirective.resetForm();\r\n        this.verificationForm.patchValue({\r\n          // firstName: this.firstName,\r\n          // lastName: this.lastName,\r\n          email: this.email\r\n          // password: this.password,\r\n          // phoneNumber: this.phoneNumber\r\n        });\r\n        // this.verificationForm.get('firstName').disable();\r\n        // this.verificationForm.get('lastName').disable();\r\n        this.verificationForm.get('email').disable();\r\n        // this.verificationForm.get('password').disable();\r\n        // this.verificationForm.get('phoneNumber').disable();\r\n      }, 0);\r\n    }\r\n    const registerModel = new RegisterModel();\r\n    const firstName = this.registerForm.controls.firstName.value;\r\n    registerModel.firstName = firstName.trim();\r\n    const lastName = this.registerForm.controls.lastName.value;\r\n    registerModel.lastName = lastName.trim();\r\n    const email = this.registerForm.controls.email.value;\r\n    registerModel.email = email.trim();\r\n    const password = this.registerForm.controls.password.value;\r\n    registerModel.password = password.trim();\r\n    const phoneNumber = this.registerForm.controls.phoneNumber.value;\r\n    registerModel.phoneNumber = phoneNumber.trim();\r\n    registerModel.isResend = isResendOtp;\r\n\r\n    this.firstName = registerModel.firstName;\r\n    this.lastName = registerModel.lastName;\r\n    this.email = registerModel.email;\r\n    this.password = registerModel.password;\r\n    this.phoneNumber = registerModel.phoneNumber;\r\n\r\n    this.authService.register(registerModel).subscribe(response => {\r\n      if (response) {\r\n        if (response.status === 'success') {\r\n          // this.authService.sendIsUserRegisteredSuccessfully(true);\r\n          // this.authService.setUserLoggedOut();\r\n          this.verificationForm.patchValue({\r\n            // firstName: this.firstName,\r\n            // lastName: this.lastName,\r\n            email: this.email\r\n            // password: this.password,\r\n            // phoneNumber: this.phoneNumber\r\n          });\r\n          // this.verificationForm.get('firstName').disable();\r\n          // this.verificationForm.get('lastName').disable();\r\n          this.verificationForm.get('email').disable();\r\n          // this.verificationForm.get('password').disable();\r\n          // this.verificationForm.get('phoneNumber').disable();\r\n          this.isSuccess = true;\r\n          this.successMsg = 'OTP is sent to your registered email.';\r\n          this.isVerification = true;\r\n          this.isResendOtp = false;\r\n        } else {\r\n          if (response.message != null && response.message !== undefined && response.message !== '') {\r\n            // this.isError = true;\r\n            // this.errorMsg = response.message;\r\n            this.toasterService.showError(\r\n              response.message,\r\n              'Error'\r\n            );\r\n            this.clearRegister();\r\n          } else {\r\n            // this.setErrorMsg();\r\n            this.toasterService.showError(\r\n              'Register Unknown Error 1, try again',\r\n              'Error'\r\n            );\r\n            this.clearRegister();\r\n          }\r\n        }\r\n      } else {\r\n        // this.setErrorMsg();\r\n        this.toasterService.showError(\r\n          'Register Unknown Error 2, try again',\r\n          'Error'\r\n        );\r\n        this.clearRegister();\r\n      }\r\n    });\r\n  }\r\n\r\n  verifyCode() {\r\n    this.clear();\r\n    this.verifySubmitted = true;\r\n    if (this.verificationForm.invalid) {\r\n      return;\r\n    }\r\n    this.isResendOtp = false;\r\n    this.code = this.verificationForm.controls.code.value;\r\n    this.code = this.code.trim();\r\n    this.authService.verifyEmailConfirmCode(this.code, this.email).subscribe(response => {\r\n      if (response) {\r\n        if (response.status === 'success') {\r\n          const data = response.data;\r\n          if (data.iec === true) {\r\n            this.authService.setUserLoggedIn(data.u, data.token, data.fn, data.ln, data.r , data.bl,data.pn ,data.Opbl,data.aguserid,data.credLi,data.agid);\r\n            // const role = this.authService.getRole();\r\n            this.router.navigate(['/user/bookings']);\r\n          } else {\r\n            // this.setErrorMsg();\r\n            this.toasterService.showError(\r\n              'VerifyCode Unknown Error 1, try again',\r\n              'Error'\r\n            );\r\n          }\r\n        } else {\r\n          if (response.message && response.message != null && response.message !== '') {\r\n            this.isError = true;\r\n            this.errorMsg = response.message;\r\n            this.clearVerifyCode();\r\n          } else {\r\n            this.toasterService.showError(\r\n              'VerifyCode Unknown Error 2, try again',\r\n              'Error'\r\n            );\r\n            // this.setErrorMsg();\r\n            this.clearVerifyCode();\r\n          }\r\n        }\r\n      } else {\r\n        // this.setErrorMsg();\r\n        this.toasterService.showError(\r\n          'VerifyCode Unknown Error 3, try again',\r\n          'Error'\r\n        );\r\n        this.clearVerifyCode();\r\n      }\r\n    });\r\n  }\r\n\r\n  clear() {\r\n    this.isError = false;\r\n    this.errorMsg = '';\r\n    this.isSuccess = false;\r\n    this.successMsg = '';\r\n  }\r\n\r\n  clearRegister() {\r\n    setTimeout(() => this.formGroupDirective.resetForm(), 0);\r\n    this.firstNameInput.nativeElement.focus();\r\n  }\r\n\r\n  clearVerifyCode() {\r\n    setTimeout(() => {\r\n      this.formGroupDirective.resetForm();\r\n      this.verificationForm.patchValue({\r\n        // firstName: this.firstName,\r\n        // lastName: this.lastName,\r\n        email: this.email\r\n        // password: this.password,\r\n        // phoneNumber: this.phoneNumber\r\n      });\r\n      // this.verificationForm.get('firstName').disable();\r\n      // this.verificationForm.get('lastName').disable();\r\n      this.verificationForm.get('email').disable();\r\n      // this.verificationForm.get('password').disable();\r\n      // this.verificationForm.get('phoneNumber').disable();\r\n      this.isResendOtp = true;\r\n    }, 0);\r\n    this.codeInput.nativeElement.focus();\r\n  }\r\n\r\n  // setErrorMsg() {\r\n  //   this.isError = true;\r\n  //   this.errorMsg = 'Something went wrong! Please try again.';\r\n  // }\r\n\r\n  /**\r\n   * On destroy\r\n   */\r\n  ngOnDestroy(): void {\r\n    // Unsubscribe from all subscriptions\r\n    this.unsubscribeAll.next(0);\r\n    this.unsubscribeAll.complete();\r\n  }\r\n}\r\n\r\n/*\r\n * Confirm password validator\r\n *\r\n * @param {AbstractControl} control\r\n * @returns {ValidationErrors | null}\r\n */\r\nexport const confirmPasswordValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n\r\n  if (!control.parent || !control) {\r\n    return null;\r\n  }\r\n\r\n  const password = control.parent.get('password');\r\n  const passwordConfirm = control.parent.get('passwordConfirm');\r\n\r\n  if (!password || !passwordConfirm) {\r\n    return null;\r\n  }\r\n\r\n  if (passwordConfirm.value === '') {\r\n    return null;\r\n  }\r\n\r\n  if (password.value === passwordConfirm.value) {\r\n    return null;\r\n  }\r\n\r\n  return { passwordsNotMatching: true };\r\n};\r\n"],"x_google_ignoreList":[]}