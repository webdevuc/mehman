{"version":3,"file":"src_app_auth_auth_module_ts.js","mappings":"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","names":["core","SignInComponent","constructor","formBuilder","authService","router","cookieService","toasterService","this","unsubscribeAll","Subject","ngOnInit","window","scrollTo","checkLogOut","clear","email","password","code","isVerification","isResendOtp","submitted","verifySubmitted","currentiIsPasswordResetSuccessfully","subscribe","status","isPasswordResetSuccessfully","loginForm","group","fesm2020_forms","verificationForm","login","sendIsPasswordResetSuccessfully","isloggedOut","invalid","setTimeout","formGroupDirective","resetForm","patchValue","get","disable","auth","login_model","controls","value","trim","response","data","iec","setUserLoggedIn","u","token","fn","ln","r","bl","pn","Opbl","aguserid","credLi","agid","navigate","isSuccess","successMsg","message","showError","clearLogin","verifyCode","verifyEmailConfirmCode","isError","errorMsg","clearVerifyCode","set","delete","setUserLoggedOut","emailInput","nativeElement","focus","codeInput","ngOnDestroy","next","complete","selectors","ForgotPasswordComponent","isResetPassword","isResetSuccess","resetSubmitted","forgotPasswordForm","resetPasswordForm","passwordConfirm","sign_up_component","valueChanges","pipe","takeUntil","updateValueAndValidity","sendResetCode","forgotPassword","clearSendResetCode","verifyForgotPasswordCode","resetPassword","resetPasswordModel","reset_password_model","newPassword","clearResetPassword","passwordInput","routes","path","component","AuthModule","common"],"sourceRoot":"webpack:///","sources":["./src/app/auth/sign-in/sign-in.component.html","./src/app/auth/sign-in/sign-in.component.ts","./src/app/auth/forgot-password/forgot-password.component.html","./src/app/auth/forgot-password/forgot-password.component.ts","./src/app/auth/auth.module.ts"],"sourcesContent":["<section class=\"hero-signup\">\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-12 col-sm-12 col-xs-12\">\r\n        <div class=\"signup-boxes\">\r\n          <div class=\"signup-box\">\r\n            <ng-container *ngIf=\"!isVerification\">\r\n              <div class=\"signup-title\">\r\n                <h2>Good to see you again</h2>\r\n                <p>Sign in for member-only deals and access your trip details</p>\r\n              </div>\r\n              <div class=\"signup-form\">\r\n                <form [formGroup]=\"loginForm\">\r\n                  <!--<div class=\"alert alert-success\" *ngIf=\"isUserRegisteredSuccessfully\">\r\n                    Thank you for registration. Sign in and enjoy Mehman.pk services.\r\n                  </div>-->\r\n                  <div class=\"alert alert-success\" *ngIf=\"isPasswordResetSuccessfully\">\r\n                    Password reset successfully!\r\n                  </div>\r\n                  <div class=\"alert alert-info\" *ngIf=\"isloggedOut\">\r\n                    You have been logged out successfully!\r\n                  </div>\r\n                  <div class=\"alert alert-danger\" *ngIf=\"isError\">\r\n                    {{ errorMsg }}\r\n                  </div>\r\n                  <div class=\"alert alert-success\" *ngIf=\"isSuccess\">\r\n                    {{ successMsg }}\r\n                  </div>\r\n                  <label>Email</label>\r\n                  <input type=\"text\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"Email\"\r\n                         formControlName=\"email\"\r\n                         #emailInput\r\n                         [ngClass]=\"{ 'is-invalid': (submitted || loginForm.get('email').touched) && loginForm.get('email').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"loginForm.get('email').errors && (submitted || loginForm.get('email').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"loginForm.get('email').errors.required\">Email is required.</div>\r\n                    <div *ngIf=\"loginForm.get('email').errors.email\">Enter a valid email.</div>\r\n                  </div>\r\n                  <label>Password</label>\r\n                  <input type=\"password\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"Password\"\r\n                         formControlName=\"password\"\r\n                         [ngClass]=\"{ 'is-invalid': (submitted || loginForm.get('password').touched) && loginForm.get('password').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"loginForm.get('password').errors && (submitted || loginForm.get('password').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"loginForm.get('password').errors.required\">Password is required.</div>\r\n                    <div *ngIf=\"loginForm.get('password').errors.minlength\">Password must be at least 8 characters.</div>\r\n                    <div *ngIf=\"loginForm.get('password').errors.maxlength\">Password must be at max 25 characters.</div>\r\n                  </div>\r\n                  <div class=\"remembarme-box\">\r\n                    <div class=\"remeber-cont\">\r\n                      <div class=\"tool-check fliht-check\">\r\n                        <!--<input type=\"checkbox\" id=\"agree\" class=\"tool-input\">\r\n                        <label for=\"agree\"></label>\r\n                        <span> Remembar me</span>-->\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"remember-lik\">\r\n                      <a routerLink=\"/auth/forgot-password\">Forget Password?</a>\r\n                    </div>\r\n                  </div>\r\n                  <button type=\"submit\"\r\n                          class=\"custom-sign-btn btn\"\r\n                          (click)=\"login()\"\r\n                          [disabled]=\"loginForm.invalid && submitted\">\r\n                    Sign In\r\n                  </button>\r\n                </form>\r\n              </div>\r\n              <div class=\"have-account\">\r\n                <div class=\"account-cont\">\r\n                  <h5>Don’t have an account?</h5>\r\n                </div>\r\n                <div class=\"have-btn\">\r\n                  <a [routerLink]=\"['/auth/signup']\">Create Account</a>\r\n                </div>\r\n              </div>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"isVerification\">\r\n              <div class=\"signup-title\">\r\n                <h2>Verify OTP</h2>\r\n                <p>Confirm your registered email address</p>\r\n              </div>\r\n              <div class=\"signup-form\">\r\n                <form [formGroup]=\"verificationForm\">\r\n                  <div class=\"alert alert-danger\" *ngIf=\"isError\">\r\n                    {{ errorMsg }}\r\n                  </div>\r\n                  <div class=\"alert alert-success\" *ngIf=\"isSuccess\">\r\n                    {{ successMsg }}\r\n                  </div>\r\n                  <label>Email</label>\r\n                  <input type=\"text\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"Email\"\r\n                         formControlName=\"email\"\r\n                         [ngClass]=\"{ 'is-invalid': (verifySubmitted || verificationForm.get('email').touched) && verificationForm.get('email').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"verificationForm.get('email').errors && (verifySubmitted || verificationForm.get('email').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"verificationForm.get('email').errors.required\">Email is required.</div>\r\n                    <div *ngIf=\"verificationForm.get('email').errors.email\">Enter a valid email.</div>\r\n                  </div>\r\n                  <label>Password</label>\r\n                  <input type=\"password\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"Password\"\r\n                         formControlName=\"password\"\r\n                         [ngClass]=\"{ 'is-invalid': (verifySubmitted || verificationForm.get('password').touched) && verificationForm.get('password').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"verificationForm.get('password').errors && (verifySubmitted || verificationForm.get('password').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"verificationForm.get('password').errors.required\">Password is required.</div>\r\n                    <div *ngIf=\"verificationForm.get('password').errors.minlength\">Password must be at least 8 characters.</div>\r\n                    <div *ngIf=\"verificationForm.get('password').errors.maxlength\">Password must be at max 25 characters.</div>\r\n                  </div>\r\n                  <label>OTP (check your mail)</label>\r\n                  <input type=\"text\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"OTP (check your mail)\"\r\n                         formControlName=\"code\"\r\n                         #codeInput\r\n                         [ngClass]=\"{ 'is-invalid': (verifySubmitted || verificationForm.get('code').touched) && verificationForm.get('code').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"verificationForm.get('code').errors && (verifySubmitted || verificationForm.get('code').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"verificationForm.get('code').errors.required\">OTP (from Mail) is required.</div>\r\n                  </div>\r\n                  <button type=\"submit\"\r\n                          class=\"custom-sign-btn btn mt-4\"\r\n                          (click)=\"verifyCode()\"\r\n                          [disabled]=\"verificationForm.invalid && verifySubmitted\">\r\n                    Verify OTP\r\n                  </button>\r\n                  <button type=\"submit\"\r\n                          class=\"custom-sign-btn btn mt-3\"\r\n                          (click)=\"login(true)\"\r\n                          *ngIf=\"isResendOtp\">\r\n                    Resend OTP\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </ng-container>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n","import { Component, OnInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, FormGroupDirective } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { CookieService } from 'ngx-cookie-service';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { AuthService } from '../shared/auth.service';\r\nimport { LoginModel } from '../models/login.model';\r\nimport { ToasterService } from 'src/app/services/toastr-service';\r\n\r\n@Component({\r\n  selector: 'app-sign-in',\r\n  templateUrl: './sign-in.component.html',\r\n  styleUrls: ['./sign-in.component.scss']\r\n})\r\nexport class SignInComponent implements OnInit, OnDestroy {\r\n\r\n  loginForm: FormGroup;\r\n  submitted: boolean;\r\n  isloggedOut: boolean;\r\n  isError: boolean;\r\n  errorMsg: string;\r\n  isSuccess: boolean;\r\n  successMsg: string;\r\n  // isUserRegisteredSuccessfully: boolean;\r\n  isPasswordResetSuccessfully: boolean;\r\n  @ViewChild('emailInput') emailInput: ElementRef;\r\n  @ViewChild(FormGroupDirective) formGroupDirective: FormGroupDirective;\r\n\r\n  verificationForm: FormGroup;\r\n  email: string;\r\n  password: string;\r\n  code: string;\r\n  verifySubmitted: boolean;\r\n\r\n  isVerification: boolean;\r\n  isResendOtp: boolean;\r\n  @ViewChild('codeInput') codeInput: ElementRef;\r\n\r\n  // Private\r\n  private unsubscribeAll: Subject<any>;\r\n\r\n  /*\r\n    * Constructor\r\n    *\r\n    */\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private cookieService: CookieService,\r\n    private toasterService: ToasterService\r\n  ) {\r\n\r\n    // Set the private defaults\r\n    this.unsubscribeAll = new Subject();\r\n  }\r\n\r\n  // -----------------------------------------------------------------------------------------------------\r\n  // @ Lifecycle hooks\r\n  // -----------------------------------------------------------------------------------------------------\r\n\r\n  /*\r\n  * On init\r\n  */\r\n  ngOnInit(): void {\r\n    window.scrollTo(0, 0);\r\n    this.checkLogOut();\r\n    this.clear();\r\n    this.email = '';\r\n    this.password = '';\r\n    this.code = '';\r\n    this.isVerification = false;\r\n    this.isResendOtp = false;\r\n    this.submitted = false;\r\n    this.verifySubmitted = false;\r\n    // this.authService.currentIsUserRegisteredSuccessfully.subscribe(status => this.isUserRegisteredSuccessfully = status);\r\n    this.authService.currentiIsPasswordResetSuccessfully.subscribe(status => this.isPasswordResetSuccessfully = status);\r\n    this.loginForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(25)]]\r\n    });\r\n    this.verificationForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(25)]],\r\n      code: ['', [Validators.required]]\r\n    });\r\n  }\r\n\r\n  login(isResendOtp = false) {\r\n    this.clear();\r\n    // this.authService.sendIsUserRegisteredSuccessfully(false);\r\n    this.authService.sendIsPasswordResetSuccessfully(false);\r\n    this.isloggedOut = false;\r\n    this.submitted = true;\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    }\r\n    if (isResendOtp === false) {\r\n      this.isVerification = false;\r\n      this.isResendOtp = false;\r\n    } else {\r\n      setTimeout(() => {\r\n        this.formGroupDirective.resetForm();\r\n        this.verificationForm.patchValue({\r\n          email: this.email,\r\n          password: this.password\r\n        });\r\n        this.verificationForm.get('email').disable();\r\n      }, 0);\r\n    }\r\n    const auth = new LoginModel();\r\n    const email = this.loginForm.controls.email.value;\r\n    auth.email = email.trim();\r\n    const password = this.loginForm.controls.password.value;\r\n    auth.password = password.trim();\r\n    this.email = auth.email;\r\n    this.password = auth.password;\r\n\r\n    this.authService.login(auth).subscribe(response => {\r\n      if (response) {\r\n        if (response.status === 'success') {\r\n          const data = response.data;\r\n          if (data.iec === true) {\r\n            this.authService.setUserLoggedIn(data.u, data.token, data.fn, data.ln, data.r, data.bl,data.pn ,data.Opbl,\r\n              data.aguserid,data.credLi,data.agid);\r\n            // const role = this.authService.getRole();\r\n            this.router.navigate(['/user/bookings']);\r\n          } else {\r\n            this.verificationForm.patchValue({\r\n              email: this.email,\r\n              password: this.password\r\n            });\r\n            this.verificationForm.get('email').disable();\r\n            this.verificationForm.get('password').disable();\r\n            this.isSuccess = true;\r\n            this.successMsg = 'OTP is sent to your registered email.';\r\n            this.isVerification = true;\r\n            this.isResendOtp = false;\r\n          }\r\n        } else {\r\n          if (response.message != null && response.message !== undefined && response.message !== '') {\r\n            // this.isError = true;\r\n            // this.errorMsg = response.message;\r\n            this.toasterService.showError(\r\n              response.message,\r\n              'Error'\r\n            );\r\n            this.clearLogin();\r\n          } else {\r\n            // this.setErrorMsg();\r\n            this.toasterService.showError(\r\n              'Login Unknown Error 1, try again',\r\n              'Error'\r\n            );\r\n            this.clearLogin();\r\n          }\r\n        }\r\n      } else {\r\n        this.toasterService.showError(\r\n          'Login Unknown Error 1, try again',\r\n          'Error'\r\n        );\r\n        // this.setErrorMsg();\r\n        this.clearLogin();\r\n      }\r\n    });\r\n  }\r\n\r\n  verifyCode() {\r\n    this.clear();\r\n    this.verifySubmitted = true;\r\n    if (this.verificationForm.invalid) {\r\n      return;\r\n    }\r\n    this.isResendOtp = false;\r\n    this.code = this.verificationForm.controls.code.value;\r\n    this.code = this.code.trim();\r\n    this.authService.verifyEmailConfirmCode(this.code, this.email).subscribe(response => {\r\n      if (response) {\r\n        if (response.status === 'success') {\r\n          const data = response.data;\r\n          if (data.iec === true) {\r\n            this.authService.setUserLoggedIn(data.u, data.token, data.fn, data.ln, data.r, data.bl,data.pn,data.Opbl,data.aguserid,data.credLi,data.agid);\r\n            // const role = this.authService.getRole();\r\n            this.router.navigate(['/user/bookings']);\r\n          } else {\r\n            this.toasterService.showError(\r\n              'VerifyCode Unknown Error 1, try again',\r\n              'Error'\r\n            );\r\n            // this.setErrorMsg();\r\n          }\r\n        } else {\r\n          if (response.message && response.message != null && response.message !== '') {\r\n            this.isError = true;\r\n            this.errorMsg = response.message;\r\n            this.clearVerifyCode();\r\n          } else {\r\n            this.toasterService.showError(\r\n              'VerifyCode Unknown Error 2, try again',\r\n              'Error'\r\n            );\r\n            // this.setErrorMsg();\r\n            this.clearVerifyCode();\r\n          }\r\n        }\r\n      } else {\r\n        this.toasterService.showError(\r\n          'VerifyCode Unknown Error 3, try again',\r\n          'Error'\r\n        );\r\n        // this.setErrorMsg();\r\n        this.clearVerifyCode();\r\n      }\r\n    });\r\n  }\r\n\r\n  checkLogOut() {\r\n    const obj = this.cookieService.get('loggedOut');\r\n    if (obj === 'true') {\r\n      this.isloggedOut = true;\r\n      this.cookieService.set('loggedOut', 'false', 2, '/');\r\n    } else {\r\n      this.isloggedOut = false;\r\n      this.cookieService.delete('loggedOut');\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    this.isError = false;\r\n    this.errorMsg = '';\r\n    this.isSuccess = false;\r\n    this.successMsg = '';\r\n  }\r\n\r\n  clearLogin() {\r\n    setTimeout(() => this.formGroupDirective.resetForm(), 0);\r\n    this.authService.setUserLoggedOut();\r\n    this.isloggedOut = false;\r\n    this.emailInput.nativeElement.focus();\r\n  }\r\n\r\n  clearVerifyCode() {\r\n    setTimeout(() => {\r\n      this.formGroupDirective.resetForm();\r\n      this.verificationForm.patchValue({\r\n        email: this.email,\r\n        password: this.password\r\n      });\r\n      this.verificationForm.get('email').disable();\r\n      this.verificationForm.get('password').disable();\r\n      this.isResendOtp = true;\r\n    }, 0);\r\n    this.codeInput.nativeElement.focus();\r\n  }\r\n\r\n  // setErrorMsg() {\r\n  //   this.isError = true;\r\n  //   this.errorMsg = 'Something went wrong! Please try again.';\r\n  // }\r\n\r\n  /**\r\n   * On destroy\r\n   */\r\n  ngOnDestroy(): void {\r\n    // Unsubscribe from all subscriptions\r\n    this.unsubscribeAll.next(0);\r\n    this.unsubscribeAll.complete();\r\n  }\r\n}\r\n","<section class=\"hero-signup\">\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-12 col-sm-12 col-xs-12\">\r\n        <div class=\"signup-boxes\">\r\n          <div class=\"signup-box\">\r\n            <ng-container *ngIf=\"!isVerification && !isResetPassword && !isResetSuccess\">\r\n              <div class=\"signup-title\">\r\n                <h2>Recover your password</h2>\r\n                <p>Verify yourself and reset your password</p>\r\n              </div>\r\n              <div class=\"signup-form\">\r\n                <form [formGroup]=\"forgotPasswordForm\">\r\n                  <div class=\"alert alert-danger\" *ngIf=\"isError\">\r\n                    {{ errorMsg }}\r\n                  </div>\r\n                  <div class=\"alert alert-success\" *ngIf=\"isSuccess\">\r\n                    {{ successMsg }}\r\n                  </div>\r\n                  <label>Email</label>\r\n                  <input type=\"text\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"Email\"\r\n                         formControlName=\"email\"\r\n                         #emailInput\r\n                         [ngClass]=\"{ 'is-invalid': (submitted || forgotPasswordForm.get('email').touched) && forgotPasswordForm.get('email').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"forgotPasswordForm.get('email').errors && (submitted || forgotPasswordForm.get('email').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"forgotPasswordForm.get('email').errors.required\">Email is required.</div>\r\n                    <div *ngIf=\"forgotPasswordForm.get('email').errors.email\">Enter a valid email.</div>\r\n                  </div>\r\n                  <button type=\"submit\"\r\n                          class=\"custom-sign-btn btn mt-4\"\r\n                          (click)=\"sendResetCode()\"\r\n                          [disabled]=\"forgotPasswordForm.invalid && submitted\">\r\n                    Send OTP\r\n                  </button>\r\n                  <div class=\"sign-in-link mt-4\">\r\n                    <a [routerLink]=\"'/auth/signin'\">Go back to login</a>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"isVerification && !isResetPassword\">\r\n              <div class=\"signup-title\">\r\n                <h2>Verify OTP</h2>\r\n                <p>Verify your account</p>\r\n              </div>\r\n              <div class=\"signup-form\">\r\n                <form [formGroup]=\"verificationForm\">\r\n                  <div class=\"alert alert-danger\" *ngIf=\"isError\">\r\n                    {{ errorMsg }}\r\n                  </div>\r\n                  <div class=\"alert alert-success\" *ngIf=\"isSuccess\">\r\n                    {{ successMsg }}\r\n                  </div>\r\n                  <label>Email</label>\r\n                  <input type=\"text\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"Email\"\r\n                         formControlName=\"email\"\r\n                         [ngClass]=\"{ 'is-invalid': (verifySubmitted || verificationForm.get('email').touched) && verificationForm.get('email').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"verificationForm.get('email').errors && (verifySubmitted || verificationForm.get('email').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"verificationForm.get('email').errors.required\">Email is required.</div>\r\n                    <div *ngIf=\"verificationForm.get('email').errors.email\">Enter a valid email.</div>\r\n                  </div>\r\n                  <label>OTP (check your mail)</label>\r\n                  <input type=\"text\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"OTP (check your mail)\"\r\n                         formControlName=\"code\"\r\n                         #codeInput\r\n                         [ngClass]=\"{ 'is-invalid': (verifySubmitted || verificationForm.get('code').touched) && verificationForm.get('code').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"verificationForm.get('code').errors && (verifySubmitted || verificationForm.get('code').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"verificationForm.get('code').errors.required\">OTP (from Mail) is required.</div>\r\n                  </div>\r\n                  <button type=\"submit\"\r\n                          class=\"custom-sign-btn btn mt-4\"\r\n                          (click)=\"verifyCode()\"\r\n                          [disabled]=\"verificationForm.invalid && verifySubmitted\">\r\n                    Verify OTP\r\n                  </button>\r\n                  <button type=\"submit\"\r\n                          class=\"custom-sign-btn btn mt-3\"\r\n                          (click)=\"sendResetCode(true)\"\r\n                          *ngIf=\"isResendOtp\">\r\n                    Resend OTP\r\n                  </button>\r\n                  <div class=\"sign-in-link mt-4\">\r\n                    <a [routerLink]=\"'/auth/signin'\">Go back to login</a>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"!isVerification && isResetPassword\">\r\n              <div class=\"signup-title\">\r\n                <h2>Reset password</h2>\r\n                <p>Reset your password</p>\r\n              </div>\r\n              <div class=\"signup-form\">\r\n                <form [formGroup]=\"resetPasswordForm\">\r\n                  <div class=\"alert alert-danger\" *ngIf=\"isError\">\r\n                    {{ errorMsg }}\r\n                  </div>\r\n                  <div class=\"alert alert-success\" *ngIf=\"isSuccess\">\r\n                    {{ successMsg }}\r\n                  </div>\r\n                  <label>Email</label>\r\n                  <input type=\"text\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"Email\"\r\n                         formControlName=\"email\"\r\n                         [ngClass]=\"{ 'is-invalid': (resetSubmitted || resetPasswordForm.get('email').touched) && resetPasswordForm.get('email').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"resetPasswordForm.get('email').errors && (resetSubmitted || resetPasswordForm.get('email').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"resetPasswordForm.get('email').errors.required\">Email is required.</div>\r\n                    <div *ngIf=\"resetPasswordForm.get('email').errors.email\">Enter a valid email.</div>\r\n                  </div>\r\n                  <label>Password</label>\r\n                  <input type=\"password\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"Password\"\r\n                         formControlName=\"password\"\r\n                         [ngClass]=\"{ 'is-invalid': (resetSubmitted || resetPasswordForm.get('password').touched) && resetPasswordForm.get('password').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"resetPasswordForm.get('password').errors && (resetSubmitted || resetPasswordForm.get('password').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"resetPasswordForm.get('password').errors.required\">Password is required.</div>\r\n                    <div *ngIf=\"resetPasswordForm.get('password').errors.minlength\">Password must be at least 8 characters.</div>\r\n                    <div *ngIf=\"resetPasswordForm.get('password').errors.maxlength\">Password must be at max 25 characters.</div>\r\n                  </div>\r\n                  <label>Confirm Password</label>\r\n                  <input type=\"password\"\r\n                         class=\"sign-input\"\r\n                         placeholder=\"Confirm Password\"\r\n                         formControlName=\"passwordConfirm\"\r\n                         [ngClass]=\"{ 'is-invalid': (resetSubmitted || resetPasswordForm.get('passwordConfirm').touched) && resetPasswordForm.get('passwordConfirm').errors }\"\r\n                         required>\r\n                  <div *ngIf=\"resetPasswordForm.get('passwordConfirm').errors && (resetSubmitted || resetPasswordForm.get('passwordConfirm').touched)\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"resetPasswordForm.get('passwordConfirm').errors.required\">Password is required.</div>\r\n                    <div *ngIf=\"resetPasswordForm.get('passwordConfirm').errors.passwordsNotMatching\">Passwords must match.</div>\r\n                  </div>\r\n                  <button type=\"submit\"\r\n                          class=\"custom-sign-btn btn mt-4\"\r\n                          (click)=\"resetPassword()\"\r\n                          [disabled]=\"resetPasswordForm.invalid && resetSubmitted\">\r\n                    Reset Password\r\n                  </button>\r\n                  <div class=\"sign-in-link mt-4\">\r\n                    <a [routerLink]=\"'/auth/signin'\">Go back to login</a>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </ng-container>\r\n            <!--<ng-container *ngIf=\"!isVerification && !isResetPassword && isResetSuccess\">\r\n              <div class=\"alert alert-success\">\r\n                Password reset successfully!\r\n              </div>\r\n            </ng-container>-->\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n","import { Component, OnInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormGroup, FormGroupDirective, FormBuilder, Validators } from '@angular/forms';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\nimport { AuthService } from '../shared/auth.service';\r\nimport { confirmPasswordValidator } from '../sign-up/sign-up.component';\r\nimport { ResetPasswordModel } from '../models/reset-password.model';\r\nimport { ToasterService } from 'src/app/services/toastr-service';\r\n\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.component.html',\r\n  styleUrls: ['./forgot-password.component.scss']\r\n})\r\nexport class ForgotPasswordComponent implements OnInit, OnDestroy {\r\n\r\n  forgotPasswordForm: FormGroup;\r\n  verificationForm: FormGroup;\r\n  resetPasswordForm: FormGroup;\r\n  submitted: boolean;\r\n  verifySubmitted: boolean;\r\n  resetSubmitted: boolean;\r\n  email: string;\r\n  code: string;\r\n\r\n  isError: boolean;\r\n  errorMsg: string;\r\n  isSuccess: boolean;\r\n  successMsg: string;\r\n\r\n  isVerification: boolean;\r\n  isResendOtp: boolean;\r\n  isResetPassword: boolean;\r\n\r\n  isResetSuccess: boolean;\r\n\r\n  @ViewChild('emailInput') emailInput: ElementRef;\r\n  @ViewChild('codeInput') codeInput: ElementRef;\r\n  @ViewChild('passwordInput') passwordInput: ElementRef;\r\n  @ViewChild(FormGroupDirective) formGroupDirective: FormGroupDirective;\r\n\r\n  // Private\r\n  private unsubscribeAll: Subject<any>;\r\n\r\n  /*\r\n    * Constructor\r\n    *\r\n  */\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private authService: AuthService,\r\n    private toasterService: ToasterService\r\n  ) {\r\n\r\n    // Set the private defaults\r\n    this.unsubscribeAll = new Subject();\r\n  }\r\n\r\n  // -----------------------------------------------------------------------------------------------------\r\n  // @ Lifecycle hooks\r\n  // -----------------------------------------------------------------------------------------------------\r\n\r\n  /*\r\n  * On init\r\n  */\r\n  ngOnInit(): void {\r\n    window.scrollTo(0, 0);\r\n    this.clear();\r\n    this.email = '';\r\n    this.code = '';\r\n    this.isVerification = false;\r\n    this.isResetPassword = false;\r\n    this.isResetSuccess = false;\r\n    this.isResendOtp = false;\r\n    this.submitted = false;\r\n    this.verifySubmitted = false;\r\n    this.resetSubmitted = false;\r\n    // this.authService.sendIsUserRegisteredSuccessfully(false);\r\n    this.authService.sendIsPasswordResetSuccessfully(false);\r\n    this.forgotPasswordForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]]\r\n    });\r\n    this.verificationForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      code: ['', [Validators.required]]\r\n    });\r\n    this.resetPasswordForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(25)]],\r\n      passwordConfirm: ['', [Validators.required, confirmPasswordValidator]]\r\n    });\r\n\r\n    // Update the validity of the 'passwordConfirm' field\r\n    // when the 'password' field changes\r\n    this.resetPasswordForm.get('password').valueChanges\r\n      .pipe(takeUntil(this.unsubscribeAll))\r\n      .subscribe(() => {\r\n        this.resetPasswordForm.get('passwordConfirm').updateValueAndValidity();\r\n      });\r\n  }\r\n\r\n  sendResetCode(isResendOtp = false) {\r\n    this.clear();\r\n    this.submitted = true;\r\n    if (this.forgotPasswordForm.invalid) {\r\n      return;\r\n    }\r\n    if (isResendOtp === false) {\r\n      this.isVerification = false;\r\n      this.isResetPassword = false;\r\n      this.isResendOtp = false;\r\n    } else {\r\n      setTimeout(() => {\r\n        this.formGroupDirective.resetForm();\r\n        this.verificationForm.patchValue({\r\n          email: this.email\r\n        });\r\n        this.verificationForm.get('email').disable();\r\n      }, 0);\r\n    }\r\n    this.email = this.forgotPasswordForm.controls.email.value;\r\n    this.email = this.email.trim();\r\n\r\n    this.authService.forgotPassword(this.email).subscribe(response => {\r\n      if (response) {\r\n        if (response.status === 'success') {\r\n          this.verificationForm.patchValue({\r\n            email: this.email\r\n          });\r\n          this.verificationForm.get('email').disable();\r\n          this.isSuccess = true;\r\n          this.successMsg = 'OTP is sent to your registered email.';\r\n          this.isVerification = true;\r\n          this.isResendOtp = false;\r\n        } else {\r\n          if (response.message && response.message != null && response.message !== '') {\r\n            // this.isError = true;\r\n            // this.errorMsg = response.message;\r\n            this.toasterService.showError(\r\n              response.message,\r\n              'Error'\r\n            );\r\n            this.clearSendResetCode();\r\n          } else {\r\n            // this.setErrorMsg();\r\n            this.toasterService.showError(\r\n              'SendResetCode Unknown Error 1, try again',\r\n              'Error'\r\n            );\r\n            this.clearSendResetCode();\r\n          }\r\n        }\r\n      } else {\r\n        // this.setErrorMsg();\r\n        this.toasterService.showError(\r\n          'SendResetCode Unknown Error 2, try again',\r\n          'Error'\r\n        );\r\n        this.clearSendResetCode();\r\n      }\r\n    });\r\n  }\r\n\r\n  verifyCode() {\r\n    this.clear();\r\n    this.verifySubmitted = true;\r\n    if (this.verificationForm.invalid) {\r\n      return;\r\n    }\r\n    this.isResendOtp = false;\r\n    this.isResetPassword = false;\r\n    this.code = this.verificationForm.controls.code.value;\r\n    this.code = this.code.trim();\r\n    this.authService.verifyForgotPasswordCode(this.code, this.email).subscribe(response => {\r\n      if (response) {\r\n        if (response.status === 'success') {\r\n          this.resetPasswordForm.patchValue({\r\n            email: this.email\r\n          });\r\n          this.resetPasswordForm.get('email').disable();\r\n          this.isVerification = false;\r\n          this.isSuccess = true;\r\n          this.successMsg = 'OTP is verified!';\r\n          this.isResetPassword = true;\r\n        } else {\r\n          if (response.message && response.message != null && response.message !== '') {\r\n            // this.isError = true;\r\n            // this.errorMsg = response.message;\r\n            this.toasterService.showError(\r\n              response.message,\r\n              'Error'\r\n            );\r\n            this.clearVerifyCode();\r\n          } else {\r\n            this.toasterService.showError(\r\n              'VerifyCode Unknown Error 2, try again',\r\n              'Error'\r\n            );\r\n            // this.setErrorMsg();\r\n            this.clearVerifyCode();\r\n          }\r\n        }\r\n      } else {\r\n        this.toasterService.showError(\r\n          'VerifyCode Unknown Error 2, try again',\r\n          'Error'\r\n        );\r\n        // this.setErrorMsg();\r\n        this.clearVerifyCode();\r\n      }\r\n    });\r\n  }\r\n\r\n  resetPassword() {\r\n    this.clear();\r\n    this.resetSubmitted = true;\r\n    if (this.resetPasswordForm.invalid) {\r\n      return;\r\n    }\r\n    const resetPasswordModel = new ResetPasswordModel();\r\n    resetPasswordModel.email = this.email;\r\n    resetPasswordModel.code = this.code;\r\n    const newPassword = this.resetPasswordForm.controls.password.value;\r\n    resetPasswordModel.newPassword = newPassword.trim();\r\n\r\n    this.authService.resetPassword(resetPasswordModel).subscribe(response => {\r\n      if (response) {\r\n        if (response.status === 'success') {\r\n          this.isResetPassword = false;\r\n          this.isResetSuccess = true;\r\n          this.authService.sendIsPasswordResetSuccessfully(true);\r\n          this.authService.setUserLoggedOut();\r\n        } else {\r\n          if (response.message && response.message != null && response.message !== '') {\r\n            // this.isError = true;\r\n            // this.errorMsg = response.message;\r\n            this.toasterService.showError(\r\n              response.message,\r\n              'Error'\r\n            );\r\n            this.clearResetPassword();\r\n          } else {\r\n            this.toasterService.showError(\r\n              'ResetPassword Unknown Error 1, try again',\r\n              'Error'\r\n            );\r\n            // this.setErrorMsg();\r\n            this.clearResetPassword();\r\n          }\r\n        }\r\n      } else {\r\n        this.toasterService.showError(\r\n          'ResetPassword Unknown Error 2, try again',\r\n          'Error'\r\n        );\r\n        // this.setErrorMsg();\r\n        this.clearResetPassword();\r\n      }\r\n    });\r\n  }\r\n\r\n  clear() {\r\n    this.isError = false;\r\n    this.errorMsg = '';\r\n    this.isSuccess = false;\r\n    this.successMsg = '';\r\n  }\r\n\r\n  clearSendResetCode() {\r\n    setTimeout(() => this.formGroupDirective.resetForm(), 0);\r\n    this.emailInput.nativeElement.focus();\r\n  }\r\n\r\n  clearVerifyCode() {\r\n    setTimeout(() => {\r\n      this.formGroupDirective.resetForm();\r\n      this.verificationForm.patchValue({\r\n        email: this.email\r\n      });\r\n      this.verificationForm.get('email').disable();\r\n      this.isResendOtp = true;\r\n    }, 0);\r\n    this.codeInput.nativeElement.focus();\r\n  }\r\n\r\n  clearResetPassword() {\r\n    setTimeout(() => {\r\n      this.formGroupDirective.resetForm();\r\n      this.resetPasswordForm.patchValue({\r\n        email: this.email\r\n      });\r\n      this.resetPasswordForm.get('email').disable();\r\n    }, 0);\r\n    this.passwordInput.nativeElement.focus();\r\n  }\r\n\r\n  // setErrorMsg() {\r\n  //   this.isError = true;\r\n  //   this.errorMsg = '';\r\n  // }\r\n\r\n  /**\r\n   * On destroy\r\n   */\r\n  ngOnDestroy(): void {\r\n    // Unsubscribe from all subscriptions\r\n    this.unsubscribeAll.next(0);\r\n    this.unsubscribeAll.complete();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { SignInComponent } from './sign-in/sign-in.component';\r\nimport { SignUpComponent } from './sign-up/sign-up.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\n\r\nconst routes = [\r\n  {\r\n    path: 'signin',\r\n    component: SignInComponent\r\n  },\r\n  {\r\n    path: 'signup',\r\n    component: SignUpComponent\r\n  },\r\n  {\r\n    path: 'forgot-password',\r\n    component: ForgotPasswordComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SignInComponent,\r\n    SignUpComponent,\r\n    ForgotPasswordComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forChild(routes)\r\n  ]\r\n})\r\nexport class AuthModule {\r\n}\r\n"],"x_google_ignoreList":[]}